1.) setup / configure
2.) test addresses from ethereum mainnet
3.) deploy to forked ethereum -using a mainnet address
4.) deploy a contract to read balance from token 
- test with mainnet contractaddress , user address

install notes

sudo apt-get update
curl -sL https://deb.nodesource.com/setup_14.x -o nodesource_setup.sh
sudo bash nodesource_setup.sh
sudo apt install nodejs build-essential
npm install web3
npm install --save-dev @nomiclabs/hardhat-ethers ethers @nomiclabs/hardhat-waffle ethereum-waffle chai
npm i @openzeppelin/contracts@4.5.0
mkdir forkingDemo
cd forkingDemo/

npx hardhat
vi hardhat.config.js

require("@nomicfoundation/hardhat-toolbox");

/** @type import('hardhat/config').HardhatUserConfig */
module.exports = {
        networks: {
                hardhat: {
                localhost: {
                        url: "http://ec2-35-88-12-204.us-west-2.compute.amazonaws.com:8545"
            ,           chainID: 1337

                }
,
			forking: { 
				url: "https://cloudflare-eth.com/",

			}

		}
   },

        solidity: "0.8.18",
};


/forkDemo$ npx hardhat node --hostname localhost    # make sure to run as localhost vs the dns


npx hardhat console --network localhost


>await ethers.provider.getBalance("< my local address >")

e.g.
>await ethers.provider.getBalance("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266")

>await ethers.provider.getBalance("<address from etherscan>")
e.g.
> await ethers.provider.getBalance("0x71A3Bfe8f5d56F42B39F3f218edCac6311B2f38f")
845744216400112038531n

check against : 
https://etherscan.io/address/0x71a3bfe8f5d56f42b39f3f218edcac6311b2f38f



pragma solidity ^0.8.9;

// Store a single data point and allow fetching/updating of that datapoint
contract Hello {

    // data point
    string public storedData;

    event myEventTest(string eventOutput);

    function set(string memory myText) public {
        storedData = myText;
        emit myEventTest(myText);
    }

    function get() public view returns (string memory) {
        return storedData;
    }

}

npx hardhat console --network localhost
Welcome to Node.js v14.21.3.
Type ".help" for more information.
>  const signers = await ethers.getSigners();
undefined
> const contract =  await ethers.getContractFactory("Hello")
undefined
>const bal = await ethers.provider.getBalance(signers[0])
> const cd = await contract.deploy()
> const bal2 = await ethers.provider.getBalance(signers[0])
undefined
> bal2
9999990092056610771200n




> await cd.set('aaabbbb')
Promise {
  <pending>,
  [Symbol(async_id_symbol)]: 3248,
  [Symbol(trigger_async_id_symbol)]: 13,
  [Symbol(destroyed)]: { destroyed: false }
}
> await cd3.get()
'aaabbbb'
>const bal2 = await ethers.provider.getBalance(signers[0])
>bal
>bal2

### connect to a contract from forked mainnet..


 cd = contract.deploy()
>contract.set('more')
>contract.get()
>await ethers.provider.getBalance(signers[0].address)



# under Check.sol
pragma solidity ^0.8.9;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


contract Check {
        function check(address _token, address user) view public returns(uint256){
                return IERC20(_token).balanceOf(user);
        }
}

> const signers2 = await ethers.getSigners();
> await ethers.provider.getBalance(signers[0].address)
9999983327908310651332n
>const contract =  await ethers.getContractFactory("Check")
>const cc = await contract.connect(signers[0])
>const cd = cc.deploy()
>await cd.check("0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0","0x29984d1F9055cafB02dcDd53C54B727902E44975")
